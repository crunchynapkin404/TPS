# Generated by Django 5.0.14 on 2025-07-29 11:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#6B7280', help_text='Hex color code for UI display', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Skill Category',
                'verbose_name_plural': 'Skill Categories',
                'db_table': 'tps_skill_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('employee_id', models.CharField(help_text='Unique employee identifier', max_length=50, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('ytd_waakdienst_weeks', models.PositiveIntegerField(default=0, help_text='Waakdienst weeks completed this year', validators=[django.core.validators.MaxValueValidator(52)])),
                ('ytd_incident_weeks', models.PositiveIntegerField(default=0, help_text='Incident weeks completed this year', validators=[django.core.validators.MaxValueValidator(52)])),
                ('ytd_hours_logged', models.DecimalField(decimal_places=2, default=0, help_text='Total hours logged this year', max_digits=6)),
                ('preferred_shift_types', models.JSONField(default=list, help_text='Array of preferred shift type categories')),
                ('blackout_dates', models.JSONField(default=list, help_text='Array of date ranges when unavailable')),
                ('max_consecutive_days', models.PositiveIntegerField(default=7, help_text='Maximum consecutive days willing to work')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active_employee', models.BooleanField(default=True, help_text='Employee is active (different from user.is_active)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'TPS User',
                'verbose_name_plural': 'TPS Users',
                'db_table': 'tps_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('minimum_level_required', models.CharField(choices=[('basic', 'Basic'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='basic', help_text='Minimum skill level required for assignments', max_length=12)),
                ('requires_certification', models.BooleanField(default=False, help_text='Whether this skill requires active certification')),
                ('certification_validity_months', models.PositiveIntegerField(blank=True, help_text='How long certifications are valid (months)', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='accounts.skillcategory')),
            ],
            options={
                'db_table': 'tps_skills',
                'ordering': ['category__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('learning', 'Learning'), ('basic', 'Basic'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='basic', max_length=12)),
                ('is_certified', models.BooleanField(default=False)),
                ('certification_date', models.DateField(blank=True, null=True)),
                ('certification_expiry', models.DateField(blank=True, null=True)),
                ('certification_authority', models.CharField(blank=True, max_length=100)),
                ('acquired_date', models.DateField(default=django.utils.timezone.now)),
                ('last_used_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_skills', to='accounts.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Skill',
                'verbose_name_plural': 'User Skills',
                'db_table': 'tps_user_skills',
                'unique_together': {('user', 'skill')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='skills',
            field=models.ManyToManyField(blank=True, related_name='users', through='accounts.UserSkill', to='accounts.skill'),
        ),
    ]
