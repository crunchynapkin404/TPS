# Generated by Django 5.0.14 on 2025-07-29 11:31

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scheduling', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('assignment_type', models.CharField(choices=[('primary', 'Primary Assignment'), ('backup', 'Backup Assignment'), ('replacement', 'Replacement'), ('emergency', 'Emergency Assignment')], default='primary', max_length=20)),
                ('status', models.CharField(choices=[('proposed', 'Proposed'), ('pending_confirmation', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('declined', 'Declined'), ('completed', 'Completed'), ('no_show', 'No Show'), ('cancelled', 'Cancelled'), ('swapped', 'Swapped')], default='proposed', max_length=25)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('confirmation_deadline', models.DateTimeField(blank=True, help_text='Deadline for user to confirm assignment', null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('auto_assigned', models.BooleanField(default=False, help_text='Created by automatic assignment system')),
                ('force_assigned', models.BooleanField(default=False, help_text='Assignment forced despite warnings')),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('break_duration_minutes', models.PositiveIntegerField(default=0, help_text='Break time in minutes')),
                ('assignment_notes', models.TextField(blank=True, help_text='Notes from the assigner')),
                ('user_notes', models.TextField(blank=True, help_text='Notes from the assigned user')),
                ('completion_notes', models.TextField(blank=True, help_text='Notes after shift completion')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignments_made', to=settings.AUTH_USER_MODEL)),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='scheduling.shiftinstance')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shift_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tps_assignments',
                'ordering': ['-assigned_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Assignment Created'), ('confirmed', 'Assignment Confirmed'), ('declined', 'Assignment Declined'), ('cancelled', 'Assignment Cancelled'), ('completed', 'Assignment Completed'), ('modified', 'Assignment Modified'), ('swapped', 'Assignment Swapped'), ('force_assigned', 'Force Assigned')], max_length=20)),
                ('previous_status', models.CharField(blank=True, max_length=25)),
                ('new_status', models.CharField(blank=True, max_length=25)),
                ('change_reason', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional data about the change')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignment_actions', to=settings.AUTH_USER_MODEL)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='assignments.assignment')),
            ],
            options={
                'db_table': 'tps_assignment_history',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SwapRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved_partial', 'Partially Approved'), ('approved', 'Approved'), ('declined', 'Declined'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('swap_type', models.CharField(choices=[('direct', 'Direct Swap'), ('open', 'Open Request'), ('partial', 'Partial Coverage')], default='direct', max_length=20)),
                ('reason', models.TextField(help_text='Reason for the swap request')),
                ('urgency_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('emergency', 'Emergency')], default='medium', max_length=20)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When the swap request expires')),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('target_user_approved', models.BooleanField(help_text='Whether target user has approved', null=True)),
                ('manager_approved', models.BooleanField(help_text='Whether manager has approved', null=True)),
                ('additional_notes', models.TextField(blank=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='swap_requests_approved', to=settings.AUTH_USER_MODEL)),
                ('requesting_assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='swap_requests_for', to='assignments.assignment')),
                ('requesting_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='swap_requests_made', to=settings.AUTH_USER_MODEL)),
                ('target_assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='swap_requests_target', to='assignments.assignment')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='swap_requests_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tps_swap_requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['user', 'assigned_at'], name='tps_assignm_user_id_65159e_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['status', 'assigned_at'], name='tps_assignm_status_673463_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['shift', 'assignment_type'], name='tps_assignm_shift_i_19a351_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together={('shift', 'user', 'assignment_type')},
        ),
        migrations.AddIndex(
            model_name='swaprequest',
            index=models.Index(fields=['status', 'requested_at'], name='tps_swap_re_status_1e194c_idx'),
        ),
        migrations.AddIndex(
            model_name='swaprequest',
            index=models.Index(fields=['requesting_user', 'status'], name='tps_swap_re_request_a62d02_idx'),
        ),
        migrations.AddIndex(
            model_name='swaprequest',
            index=models.Index(fields=['target_user', 'status'], name='tps_swap_re_target__580996_idx'),
        ),
    ]
